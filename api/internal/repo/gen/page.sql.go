// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: page.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deletePage = `-- name: DeletePage :exec
DELETE FROM "pages"
WHERE "id" = $1
`

func (q *Queries) DeletePage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePage, id)
	return err
}

const insertPage = `-- name: InsertPage :one
INSERT INTO "pages" ("id", "datetime", "content")
VALUES ($1, $2, $3)
RETURNING id, datetime, content
`

type InsertPageParams struct {
	ID       uuid.UUID `json:"id"`
	Datetime time.Time `json:"datetime"`
	Content  string    `json:"content"`
}

func (q *Queries) InsertPage(ctx context.Context, arg InsertPageParams) (Page, error) {
	row := q.db.QueryRowContext(ctx, insertPage, arg.ID, arg.Datetime, arg.Content)
	var i Page
	err := row.Scan(&i.ID, &i.Datetime, &i.Content)
	return i, err
}

const selectPage = `-- name: SelectPage :one
SELECT id, datetime, content
FROM "pages"
WHERE "id" = $1
LIMIT 1
`

func (q *Queries) SelectPage(ctx context.Context, id uuid.UUID) (Page, error) {
	row := q.db.QueryRowContext(ctx, selectPage, id)
	var i Page
	err := row.Scan(&i.ID, &i.Datetime, &i.Content)
	return i, err
}

const selectPages = `-- name: SelectPages :many
SELECT id, datetime, content
FROM "pages"
ORDER BY "datetime"
`

func (q *Queries) SelectPages(ctx context.Context) ([]Page, error) {
	rows, err := q.db.QueryContext(ctx, selectPages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Page{}
	for rows.Next() {
		var i Page
		if err := rows.Scan(&i.ID, &i.Datetime, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePage = `-- name: UpdatePage :exec
UPDATE "pages"
SET "content" = $1,
"datetime" = $2
WHERE "id" = $3
`

type UpdatePageParams struct {
	Content  string    `json:"content"`
	Datetime time.Time `json:"datetime"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) UpdatePage(ctx context.Context, arg UpdatePageParams) error {
	_, err := q.db.ExecContext(ctx, updatePage, arg.Content, arg.Datetime, arg.ID)
	return err
}
