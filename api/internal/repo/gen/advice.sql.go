// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: advice.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const deleteAdvice = `-- name: DeleteAdvice :exec
DELETE FROM "advices"
WHERE "id" = $1
`

func (q *Queries) DeleteAdvice(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAdvice, id)
	return err
}

const insertAdvice = `-- name: InsertAdvice :one
INSERT INTO "advices" ("id", "content")
VALUES ($1, $2)
RETURNING id, content
`

type InsertAdviceParams struct {
	ID      uuid.UUID `json:"id"`
	Content string    `json:"content"`
}

func (q *Queries) InsertAdvice(ctx context.Context, arg InsertAdviceParams) (Advice, error) {
	row := q.db.QueryRowContext(ctx, insertAdvice, arg.ID, arg.Content)
	var i Advice
	err := row.Scan(&i.ID, &i.Content)
	return i, err
}

const selectAdvice = `-- name: SelectAdvice :one
SELECT id, content
FROM "advices"
WHERE "id" = $1
LIMIT 1
`

func (q *Queries) SelectAdvice(ctx context.Context, id uuid.UUID) (Advice, error) {
	row := q.db.QueryRowContext(ctx, selectAdvice, id)
	var i Advice
	err := row.Scan(&i.ID, &i.Content)
	return i, err
}

const selectAdvices = `-- name: SelectAdvices :many
SELECT id, content
FROM "advices"
ORDER BY "id"
`

func (q *Queries) SelectAdvices(ctx context.Context) ([]Advice, error) {
	rows, err := q.db.QueryContext(ctx, selectAdvices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Advice{}
	for rows.Next() {
		var i Advice
		if err := rows.Scan(&i.ID, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdvice = `-- name: UpdateAdvice :exec
UPDATE "advices"
SET "content" = $1
WHERE "id" = $2
`

type UpdateAdviceParams struct {
	Content string    `json:"content"`
	ID      uuid.UUID `json:"id"`
}

func (q *Queries) UpdateAdvice(ctx context.Context, arg UpdateAdviceParams) error {
	_, err := q.db.ExecContext(ctx, updateAdvice, arg.Content, arg.ID)
	return err
}
