// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: advice_tag.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const deleteTagFromAdvice = `-- name: DeleteTagFromAdvice :exec
DELETE FROM "advices_tags"
WHERE "advice_id" = $1
    AND "tag_id" = $2
`

type DeleteTagFromAdviceParams struct {
	AdviceID uuid.UUID `json:"advice_id"`
	TagID    uuid.UUID `json:"tag_id"`
}

func (q *Queries) DeleteTagFromAdvice(ctx context.Context, arg DeleteTagFromAdviceParams) error {
	_, err := q.db.ExecContext(ctx, deleteTagFromAdvice, arg.AdviceID, arg.TagID)
	return err
}

const insertAdviceTagEntry = `-- name: InsertAdviceTagEntry :one
INSERT INTO "advices_tags" ("advice_id", "tag_id")
    VALUES ($1, $2)
RETURNING
    advice_id, tag_id
`

type InsertAdviceTagEntryParams struct {
	AdviceID uuid.UUID `json:"advice_id"`
	TagID    uuid.UUID `json:"tag_id"`
}

func (q *Queries) InsertAdviceTagEntry(ctx context.Context, arg InsertAdviceTagEntryParams) (AdvicesTag, error) {
	row := q.db.QueryRowContext(ctx, insertAdviceTagEntry, arg.AdviceID, arg.TagID)
	var i AdvicesTag
	err := row.Scan(&i.AdviceID, &i.TagID)
	return i, err
}

const selectAdvicesForTag = `-- name: SelectAdvicesForTag :many
SELECT
    "at"."advice_id",
    "a"."content"
FROM
    "advices_tags" "at"
    JOIN "advices" "a" ON "at"."advice_id" = "a"."id"
WHERE
    "at"."tag_id" = $1
`

type SelectAdvicesForTagRow struct {
	AdviceID uuid.UUID `json:"advice_id"`
	Content  string    `json:"content"`
}

func (q *Queries) SelectAdvicesForTag(ctx context.Context, tagID uuid.UUID) ([]SelectAdvicesForTagRow, error) {
	rows, err := q.db.QueryContext(ctx, selectAdvicesForTag, tagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectAdvicesForTagRow{}
	for rows.Next() {
		var i SelectAdvicesForTagRow
		if err := rows.Scan(&i.AdviceID, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectAllEntries = `-- name: SelectAllEntries :many
SELECT
    "at"."advice_id", "at"."tag_id", "t"."tag"
FROM
    "advices_tags" "at"
    JOIN "tags" "t" ON "at"."tag_id" = "t"."tag"
ORDER BY
    "advice_id"
`

type SelectAllEntriesRow struct {
	AdviceID uuid.UUID `json:"advice_id"`
	TagID    uuid.UUID `json:"tag_id"`
	Tag      string    `json:"tag"`
}

func (q *Queries) SelectAllEntries(ctx context.Context) ([]SelectAllEntriesRow, error) {
	rows, err := q.db.QueryContext(ctx, selectAllEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectAllEntriesRow{}
	for rows.Next() {
		var i SelectAllEntriesRow
		if err := rows.Scan(&i.AdviceID, &i.TagID, &i.Tag); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectTagsForAdvice = `-- name: SelectTagsForAdvice :many
SELECT
    "at"."tag_id",
    "t"."tag"
FROM
    "advices_tags" "at"
    JOIN "tags" "t" ON "at"."tag_id" = "t"."id"
WHERE
    "at"."advice_id" = $1
`

type SelectTagsForAdviceRow struct {
	TagID uuid.UUID `json:"tag_id"`
	Tag   string    `json:"tag"`
}

func (q *Queries) SelectTagsForAdvice(ctx context.Context, adviceID uuid.UUID) ([]SelectTagsForAdviceRow, error) {
	rows, err := q.db.QueryContext(ctx, selectTagsForAdvice, adviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectTagsForAdviceRow{}
	for rows.Next() {
		var i SelectTagsForAdviceRow
		if err := rows.Scan(&i.TagID, &i.Tag); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
